package com.dineshonjava.prodos.security;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.GenericFilterBean;

public class CustomAuthenticationFilter extends GenericFilterBean {
	
	private static final String AUTHORIZATION = "Authorization";
	private static final String PREFIX = "Bearer";
	private static final String EMPTY = "";
		
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)throws ServletException, IOException {
    	String accessToken = request.getParameter("authId");
        if(!StringUtils.isEmpty(accessToken)) {
            // Create our Authentication and let Spring know about it
            Authentication auth = new CustomAuthenticationToken(accessToken);
            SecurityContextHolder.getContext().setAuthentication(auth);
        }
	    filterChain.doFilter(request, response);
    }

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		
		 String bearerToken = ((HttpServletRequest) request).getHeader(AUTHORIZATION);
		 if (bearerToken != null && bearerToken.startsWith(PREFIX)) {
	            return bearerToken.replace(PREFIX, EMPTY).trim();
	        }
	}
    
}